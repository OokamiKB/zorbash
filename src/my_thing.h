//
// Copyright goblinhack@gmail.com
// See the README.md file for license info.
//

#pragma once
#ifndef _MY_THING_H_
#define _MY_THING_H_

#include <list>
#include "my_thing_defs.h"
#include "my_dice.h"
#include "my_thing_id.h"
#include "my_fwd.h"
#include "my_color.h"
#include "my_time.h"
#include "my_point.h"

typedef enum {
    THING_SHOVE_TRIED_AND_FAILED,
    THING_SHOVE_TRIED_AND_PASSED,
    THING_SHOVE_NEVER_TRIED,
} ThingShoved;

typedef struct {
    uint16_t tile_outline;
    uint16_t bl1_tile;
    uint16_t bot1_tile;
    uint16_t br1_tile;
    uint16_t left1_tile;
    uint16_t right1_tile;
    uint16_t tl1_tile;
    uint16_t top1_tile;
    uint16_t tr1_tile;
    uint16_t bl2_tile;
    uint16_t bot2_tile;
    uint16_t bot3_tile;
    uint16_t br2_tile;
    uint16_t left2_tile;
    uint16_t right2_tile;
    uint16_t tl2_tile;
    uint16_t top2_tile;
    uint16_t tr2_tile;
} ThingTiles;

typedef struct Thing_ {
public:
    Thing_ (void);
    ~Thing_ (void);
    Monstp      monstp               {};
    Levelp      level                {};
    int16_t     tp_id                {-1};  // Common settings
    ThingId     id                   {};    // Unique per thing.
    ThingTiles  tiles                {};
    fpoint      interpolated_mid_at;
    fpoint      last_mid_at;         // Previous hop where we were.
    fpoint      mid_at;              // Grid coordinates.
    point       last_attached;
    point       last_blit_br;        // Last blit coords
    point       last_blit_tl;        // Offset from top left of map
    point       last_blit_at;        // Center of the above
    timestamp_t timestamp_next_frame {};
    uint16_t    tile_curr            {};
    uint8_t     alpha                {255}; // For fading
    uint8_t     z_depth              {};
    uint64_t    dir:4                {};    // Direction

    /////////////////////////////////////////////////////////////////////////
    // Keep these sorted alphabetically to make it easier to see additions
    // and always update game_load.cpp and game_save.cpp
    //
    // | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
    // v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v
    /////////////////////////////////////////////////////////////////////////
    uint64_t has_ever_moved:1          {};
    uint64_t has_external_particle:1   {}; // current in motion particle
    uint64_t has_internal_particle:1   {}; // current in motion particle
    uint64_t has_light:1               {};
    uint64_t inited_tiles:1            {};
    uint64_t is_attached:1             {};
    uint64_t is_being_destroyed:1      {};
    uint64_t is_blitted:1              {};
    uint64_t is_bouncing:1             {};
    uint64_t is_changing_level:1       {};
    uint64_t is_dead:1                 {};
    uint64_t is_facing_left:1          {};
    uint64_t is_fadeup:1               {};
    uint64_t is_falling:1              {};
    uint64_t is_hidden:1               {};
    uint64_t is_hungry:1               {};
    uint64_t is_in_lava:1              {};
    uint64_t is_in_water:1             {};
    uint64_t is_jumping:1              {};
    uint64_t is_moving:1               {};
    uint64_t is_open:1                 {};
    uint64_t is_resurrected:1          {};
    uint64_t is_resurrecting:1         {};
    uint64_t is_sleeping:1             {};
    uint64_t is_starving:1             {};
    uint64_t is_tick_done:1            {}; // has moved/hit and finished its move
    uint64_t is_waiting_to_ascend_dungeon:1  {};
    uint64_t is_waiting_to_descend_sewer:1   {};
    uint64_t is_waiting_to_descend_dungeon:1 {};
    uint64_t is_waiting_to_ascend_sewer:1    {};
    uint64_t is_waiting_to_fall:1      {};
    uint64_t is_the_grid:1             {};

    //
    // These are flags used to make sure we set or unset flags onto
    // the level only once.
    //
    uint64_t i_set_is_acid:1                   {};
    uint64_t i_set_is_poison:1                 {};
    uint64_t i_set_is_blood:1                  {};
    uint64_t i_set_is_chasm:1                  {};
    uint64_t i_set_is_corpse:1                 {};
    uint64_t i_set_is_corridor:1               {};
    uint64_t i_set_is_deep_water:1             {};
    uint64_t i_set_is_shallow_water:1          {};
    uint64_t i_set_is_dirt:1                   {};
    uint64_t i_set_is_door:1                   {};
    uint64_t i_set_is_ascend_dungeon:1         {};
    uint64_t i_set_is_descend_dungeon:1        {};
    uint64_t i_set_is_ascend_sewer:1           {};
    uint64_t i_set_is_descend_sewer:1          {};
    uint64_t i_set_is_fire:1                   {};
    uint64_t i_set_is_floor:1                  {};
    uint64_t i_set_is_food:1                   {};
    uint64_t i_set_is_minion_generator:1       {};
    uint64_t i_set_is_gold:1                   {};
    uint64_t i_set_is_hazard:1                 {};
    uint64_t i_set_is_extreme_hazard:1         {};
    uint64_t i_set_is_treasure_class_a:1       {};
    uint64_t i_set_is_treasure_class_b:1       {};
    uint64_t i_set_is_treasure_class_c:1       {};
    uint64_t i_set_is_key:1                    {};
    uint64_t i_set_is_lava:1                   {};
    uint64_t i_set_is_light_blocker:1          {};
    uint64_t i_set_is_monst:1                  {};
    uint64_t i_set_is_movement_blocking_hard:1 {};
    uint64_t i_set_is_movement_blocking_soft:1 {};
    uint64_t i_set_is_potion:1                 {};
    uint64_t i_set_is_ripple:1                 {};
    uint64_t i_set_is_rock:1                   {};
    uint64_t i_set_is_secret_door:1            {};
    uint64_t i_set_is_smoke:1                  {};
    uint64_t i_set_is_torch:1                  {};
    uint64_t i_set_is_treasure:1               {};
    uint64_t i_set_is_wall:1                   {};
    uint64_t i_set_is_gfx_water:1              {};

    /////////////////////////////////////////////////////////////////////////
    // ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^
    // | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
    //
    // Keep these sorted alphabetically to make it easier to see additions
    // and always update game_load.cpp and game_save.cpp
    /////////////////////////////////////////////////////////////////////////
    //
    // Fields not saved
    uint64_t debug:1                           {};
private:
    //
    // As this is called a lot, probably worth the memory
    //
    Tpp      mytp                              {};

public:
    ThingId get_on_fire_anim_id(void) const;
    ThingId get_weapon_id(void) const;
    ThingId get_weapon_id_carry_anim(void) const;
    ThingId get_weapon_id_use_anim(void) const;
    ThingId set_on_fire_anim_id(ThingId);
    ThingId set_weapon_id(ThingId);
    ThingId set_weapon_id_carry_anim(ThingId);
    ThingId set_weapon_id_use_anim(ThingId);
    ThingShoved try_to_shove(Thingp it, fpoint delta);
    ThingShoved try_to_shove(fpoint future_pos);
    ThingShoved try_to_shove_into_hazard(Thingp it, fpoint delta);
    Thingp get_immediate_minion_owner() const;
    Thingp get_immediate_owner() const;
    Thingp get_top_minion_owner() const;
    Thingp get_top_owner() const;
    Thingp nearby_most_dangerous_thing_get(void);
    Thingp weapon_get() const;
    Thingp weapon_get_carry_anim(void);
    Thingp weapon_get_use_anim(void) const;
    bool achieve_goals_in_death();
    bool achieve_goals_in_life();
    bool ai_blocked(void);
    bool ai_blocked_completely(void);
    bool ai_choose_wander(point& nh);
    bool ai_create_on_fire_path(point &nh, const point start, const point end);
    bool ai_create_path(point &nh, const point start, const point end);
    bool ai_escape(void);
    bool ai_obstacle(Thingp);
    bool ai_obstacle(fpoint);
    bool ai_on_fire(void);
    bool ai_on_fire_choose_target (point& nh);
    bool ai_wander(void);
    bool ascend(int z);
    bool ascend_dungeon(void);
    bool ascend_dungeon_tick();
    bool ascend_sewer(void);
    bool ascend_sewer_tick();
    bool attack(Thingp it);
    bool attack(fpoint future_pos);
    bool bag_add(Thingp);
    bool bag_can_place_at(Thingp item, point pos);
    bool bag_compress(void);
    bool bag_contains(Thingp item);
    bool bag_place_at(Thingp item, point pos);
    bool bag_remove(Thingp);
    bool bag_remove_at(Thingp item, point pos);
    bool can_eat(const Thingp it);
    bool carry(Thingp w);
    bool add_kill(Thingp it);
    bool skill_add(Thingp it);
    bool skill_remove(Thingp it);
    void skill_remove_all(void);
    bool change_owner(Thingp new_owner);
    bool chasm_tick();
    bool check_anything_to_carry(void);
    bool collision_add_candidates(Thingp it, fpoint future_pos, int x, int y, int dx, int dy);
    bool collision_check_and_handle(Thingp it, fpoint future_pos, int x, int y, int dx, int dy);
    bool collision_check_and_handle(fpoint, bool *, bool *, float radius);
    bool collision_check_and_handle_at(bool *, bool *);
    bool collision_check_and_handle_at(fpoint, bool *, bool *);
    bool collision_check_and_handle_nearby(fpoint, bool *, bool *);
    bool collision_check_only(Thingp it, fpoint future_pos, int x, int y);
    bool collision_check_only(Thingp it, int x, int y, int dx, int dy);
    bool collision_check_only(fpoint);
    bool collision_check_only(void);
    bool collision_find_best_target(bool *, bool *);
    bool collision_obstacle(Thingp);
    bool collision_obstacle(fpoint);
    bool collision_obstacle(point);
    bool cursor_path_pop_first_move(void);
    bool cursor_path_pop_next_and_move(void);
    bool descend_dungeon(void);
    bool descend_dungeon_tick();
    bool descend_sewer(void);
    bool descend_sewer_tick();
    bool describe_when_hovering_over(void);
    bool describe_when_in_inventory(void);
    bool drop(Thingp w);
    bool drop(Thingp w, Thingp target);
    bool drop_from_ether(Thingp w);
    bool drop_into_ether(Thingp w);
    bool eat(Thingp it);
    bool fall(void);
    bool fall_to_next_level(void);
    bool get_coords(point &blit_tl, point &blit_br, point &pre_effect_blit_tl, point &pre_effect_blit_br, Tilep &tile, bool reflection);
    bool get_map_offset_coords(point &blit_tl, point &blit_br, Tilep &tile, bool reflection);
    bool inventory_id_insert(Thingp what);
    bool inventory_id_remove(Thingp what);
    bool inventory_id_remove(Thingp what, Thingp target);
    bool is_ai_obstacle_for_me(const point&);
    bool is_blocking_terrain(const Thingp it);
    bool is_bloodied(void);
    bool is_carrying_item(void);
    bool is_carrying_treasure(void);
    bool is_enemy(Thingp attacker) const;
    bool is_on_fire(void);
    bool kill_if(const std::string& what, const point &p);
    bool location_check();
    bool match(const std::string& what);
    bool move(fpoint future_pos);
    bool move(fpoint future_pos, uint8_t up, uint8_t down, uint8_t left, uint8_t right, uint8_t fire, uint8_t idle, bool shove_allowed);
    bool move_no_shove(fpoint future_pos);
    bool move_to_check(const point&, const bool escaping);
    bool move_to_or_attack(const point&);
    bool move_to_or_escape(const point&);
    bool open_door(Thingp door);
    bool particle_anim_exists(void);
    bool place(const std::string& what, const point &p);
    bool possible_to_attack(const Thingp it);
    bool set_on_fire(const std::string &why);
    bool spawn_fire(const std::string& what);
    bool spawn_next_to(const std::string& what);
    bool spawn_next_to_or_on_monst(const std::string& what);
    bool spawn_radius_range(Thingp parent, const std::string& what, uint32_t radius_min, uint32_t radius_max);
    bool spawn_under(const std::string& what);
    bool steal_item_from(Thingp);
    bool steal_treasure_from(Thingp);
    bool throw_item(Thingp w);
    bool try_harder_to_jump(void);
    bool try_to_carry(Thingp w);
    bool try_to_escape(void);
    bool try_to_jump(point p);
    bool try_to_jump(void);
    bool try_to_jump_away_from_player(void);
    bool try_to_jump_towards_player(void);
    bool use(Thingp w);
    bool will_avoid_threat(const Thingp it);
    bool will_avoid_threat(const fpoint &p);
    bool will_avoid_threat(const point &p);
    bool will_prefer_terrain(const Thingp it);
    const Dice& get_damage_bite_dice(void) const;
    const Dice& get_damage_melee_dice(void) const;
    const Dice& get_gold_value_dice(void) const;
    const Dice& get_health_initial_dice(void) const;
    const Dice& get_lifespan_dice(void) const;
    const Dice& get_nutrition_dice(void) const;
    const Dice& get_on_idle_dice(void) const;
    const Dice& get_resurrect_dice(void) const;
    const ThingId& get_immediate_minion_owner_id (void) const;
    const ThingId& get_immediate_owner_id (void) const;
    const ThingId& set_minion_owner_id (const ThingId &v);
    const ThingId& set_owner_id (const ThingId &v);
    const Tpp tp(void) const;
    const Tpp tp_or_update(void);
    const fpoint &get_interpolated_mid_at (void) const;
    const std::array<std::array<ThingId, MAX_BAG_WIDTH>, MAX_BAG_HEIGHT> * get_const_bag (void) const;
    const std::string& get_damage_bite_dice_str(void) const;
    const std::string& get_damage_melee_dice_str(void) const;
    const std::string& get_gold_value_dice_str(void) const;
    const std::string& get_health_initial_dice_str(void) const;
    const std::string& get_lifespan_dice_str(void) const;
    const std::string& get_nutrition_dice_str(void) const;
    const std::string& get_on_idle_dice_str(void) const;
    const std::string& get_resurrect_dice_str(void) const;
    const std::string& gfx_anim_attack(void) const;
    const std::string& light_color(void) const;
    const std::string& long_text_description(void) const;
    const std::string& on_birth_do(void) const;
    const std::string& on_death_do(void) const;
    const std::string& on_use_do(void) const;
    const std::string& short_text_name(void) const;
    const std::string& spawn_on_shoved(void) const;
    const std::string& str1(void) const;
    const std::string& str2(void) const;
    const std::string& str3(void) const;
    const std::string& str4(void) const;
    const std::string& str5(void) const;
    const std::string& str6(void) const;
    const std::string& str7(void) const;
    const std::string& text_description(void) const;
    const std::string& text_hits(void) const;
    const std::string& text_name(void) const;
    const std::string& text_title(void) const;
    const std::string& weapon_carry_anim(void) const;
    float get_bounce(void);
    float get_bounce_fade(void) const;
    float get_bounce_height(void) const;
    float get_fadeup(void);
    float get_fadeup_fade(void) const;
    float get_fadeup_height(void) const;
    float get_fall(void);
    float get_fall_height(void) const;
    float get_health_pct(void);
    float get_lunge(void);
    float get_stamina_health_pct(void);
    float get_wobble(void) const;
    float how_far_i_can_jump(void);
    float update_wobble(void);
    fpoint get_lunge_to(void) const;
    int ai_choose_goal(void);
    int ai_delay_after_moving_ms(void);
    int ai_hit_actual(Thingp hitter, Thingp real_hitter, bool crit, bool bite, int damage);
    int ai_obstacle(void) const;
    int ai_scent_distance(void) const;
    int attack(void) const;
    int attack_eater(void) const;
    int attack_humanoid(void) const;
    int attack_living(void) const;
    int attack_lunge(void) const;
    int attack_meat(void) const;
    int attack_shove(void) const;
    int attack_shove_chance_d1000(void) const;
    int avoids_acid(void) const;
    int avoids_fire(void) const;
    int avoids_poison(void) const;
    int avoids_water(void) const;
    int bag_height(void);
    int bag_item_height(void) const;
    int bag_item_width(void) const;
    int bag_width(void);
    int collision_attack(void) const;
    int collision_box(void) const;
    int collision_check(void) const;
    int collision_circle(void) const;
    int collision_hit_priority(void) const;
    int damage_doubled_from_acid(void) const;
    int damage_doubled_from_fire(void) const;
    int damage_doubled_from_poison(void) const;
    int damage_doubled_from_water(void) const;
    int decr_gold(int);
    int decr_gold(void);
    int decr_health(int);
    int decr_health(void);
    int decr_health_max(int);
    int decr_health_max(void);
    int decr_keys(int);
    int decr_keys(void);
    int decr_lifespan(int);
    int decr_lifespan(void);
    int decr_minion_count(int);
    int decr_minion_count(void);
    int decr_modifier_attack(int);
    int decr_modifier_attack(void);
    int decr_modifier_constitution(int);
    int decr_modifier_constitution(void);
    int decr_modifier_defence(int);
    int decr_modifier_defence(void);
    int decr_modifier_strength(int);
    int decr_modifier_strength(void);
    int decr_owned_count(int);
    int decr_owned_count(void);
    int decr_poison(int);
    int decr_poison(void);
    int decr_stamina(int);
    int decr_stamina(void);
    int decr_stamina_max(int);
    int decr_stamina_max(void);
    int decr_stats01(int);
    int decr_stats01(void);
    int decr_stats02(int);
    int decr_stats02(void);
    int decr_stats03(int);
    int decr_stats03(void);
    int decr_stats04(int);
    int decr_stats04(void);
    int decr_stats05(int);
    int decr_stats05(void);
    int decr_stats06(int);
    int decr_stats06(void);
    int decr_stats07(int);
    int decr_stats07(void);
    int decr_stats08(int);
    int decr_stats08(void);
    int decr_stats09(int);
    int decr_stats09(void);
    int decr_stats10(int);
    int decr_stats10(void);
    int decr_stats11(int);
    int decr_stats11(void);
    int decr_stats12(int);
    int decr_stats12(void);
    int decr_stats17(int);
    int decr_stats17(void);
    int decr_stats_stats19(int);
    int decr_stats_stats19(void);
    int decr_throw_distance(int);
    int decr_throw_distance(void);
    int decr_tick_rate_tenths(int);
    int decr_tick_rate_tenths(void);
    int defence(void) const;
    int get_bounce_count(void) const;
    int get_damage_bite(void) const;
    int get_damage_melee(void) const;
    int get_danger_level(void);
    int get_gold(void) const;
    int get_gold_value(void) const;
    int get_health(void) const;
    int get_health_initial(void) const;
    int get_health_max(void) const;
    int get_idle_tick(void) const;
    int get_keys(void) const;
    int get_lifespan(void) const;
    int get_lifespan_initial(void) const;
    int get_minion_count(void) const;
    int get_modifier_attack(void) const;
    int get_modifier_constitution(void) const;
    int get_modifier_defence(void) const;
    int get_modifier_strength(void) const;
    int get_nutrition(void) const;
    int get_owned_count(void) const;
    int get_poison(void) const;
    int get_resurrect(void) const;
    int get_stamina(void) const;
    int get_stamina_max(void) const;
    int get_stats01(void) const;
    int get_stats02(void) const;
    int get_stats03(void) const;
    int get_stats04(void) const;
    int get_stats05(void) const;
    int get_stats06(void) const;
    int get_stats07(void) const;
    int get_stats08(void) const;
    int get_stats09(void) const;
    int get_stats10(void) const;
    int get_stats11(void) const;
    int get_stats12(void) const;
    int get_stats17(void) const;
    int get_stats_stats19(void) const;
    int get_submerged_offset(void) const;
    int get_throw_distance(void) const;
    int get_tick_rate_tenths(void) const;
    int gfx_an_animation_only(void) const;
    int gfx_animated(void) const;
    int gfx_animated_can_hflip(void) const;
    int gfx_animated_can_vflip(void) const;
    int gfx_animated_no_dir(void) const;
    int gfx_attack_anim(void) const;
    int gfx_bounce_always(void) const;
    int gfx_bounce_on_move(void) const;
    int gfx_dead_anim(void) const;
    int gfx_health_bar_shown(void) const;
    int gfx_health_bar_shown_only_when_injured(void) const;
    int gfx_is_rrr99(void) const;
    int gfx_moves_ahead_shown(void) const;
    int gfx_on_fire_anim(void) const;
    int gfx_oversized_but_sitting_on_the_ground(void) const;
    int gfx_show_outlined(void) const;
    int gfx_shown_in_bg(void) const;
    int gfx_small_shadow_caster(void) const;
    int gfx_weapon_carry_anim(void) const;
    int health_hunger_pct(void) const;
    int health_starving_pct(void) const;
    int hunger_clock_freq_ms(void) const;
    int incr_gold(int);
    int incr_gold(void);
    int incr_health(int);
    int incr_health(void);
    int incr_health_max(int);
    int incr_health_max(void);
    int incr_keys(int);
    int incr_keys(void);
    int incr_lifespan(int);
    int incr_lifespan(void);
    int incr_minion_count(int);
    int incr_minion_count(void);
    int incr_modifier_attack(int);
    int incr_modifier_attack(void);
    int incr_modifier_constitution(int);
    int incr_modifier_constitution(void);
    int incr_modifier_defence(int);
    int incr_modifier_defence(void);
    int incr_modifier_strength(int);
    int incr_modifier_strength(void);
    int incr_owned_count(int);
    int incr_owned_count(void);
    int incr_poison(int);
    int incr_poison(void);
    int incr_stamina(int);
    int incr_stamina(void);
    int incr_stamina_max(int);
    int incr_stamina_max(void);
    int incr_stats01(int);
    int incr_stats01(void);
    int incr_stats02(int);
    int incr_stats02(void);
    int incr_stats03(int);
    int incr_stats03(void);
    int incr_stats04(int);
    int incr_stats04(void);
    int incr_stats05(int);
    int incr_stats05(void);
    int incr_stats06(int);
    int incr_stats06(void);
    int incr_stats07(int);
    int incr_stats07(void);
    int incr_stats08(int);
    int incr_stats08(void);
    int incr_stats09(int);
    int incr_stats09(void);
    int incr_stats10(int);
    int incr_stats10(void);
    int incr_stats11(int);
    void set_interpolated_mid_at (fpoint v);
    int incr_stats11(void);
    int incr_stats12(int);
    int incr_stats12(void);
    int incr_stats17(int);
    int incr_stats17(void);
    int incr_stats_stats19(int);
    int incr_stats_stats19(void);
    int incr_throw_distance(int);
    int incr_throw_distance(void);
    int incr_tick_rate_tenths(int);
    int incr_tick_rate_tenths(void);
    int inventory_id_slot_count(const uint32_t slot);
    int is_able_to_change_levels(void) const;
    int is_able_to_fall(void) const;
    int is_able_to_see_through_doors(void) const;
    int is_able_to_walk_through_walls(void) const;
    int is_acid(void) const;
    int is_acid_lover(void) const;
    int is_active(void) const;
    int is_alive_monst(void) const;
    int is_always_hit(void) const;
    int is_ascend_dungeon(void) const;
    int is_ascend_sewer(void) const;
    int is_attackable_by_monst(void) const;
    int is_attackable_by_player(void) const;
    int is_auto_collect_item(void) const;
    int is_bag(void) const;
    int is_bleeder(void) const;
    int is_blood(void) const;
    int is_blood_splatter(void) const;
    int is_burnable(void) const;
    int is_chasm(void) const;
    int is_collect_as_keys(void) const;
    int is_collectable(void) const;
    int is_combustible(void) const;
    int is_corpse(void) const;
    int is_corridor(void) const;
    int is_critical_to_level(void) const;
    int is_cursor(void) const;
    int is_cursor_can_hover_over(void) const;
    int is_cursor_can_hover_over_but_needs_double_click(void) const;
    int is_cursor_path(void) const;
    int is_dangerous(Thingp);
    int is_dead_on_shove(void) const;
    int is_deep_water(void) const;
    int is_descend_dungeon(void) const;
    int is_descend_sewer(void) const;
    int is_described_when_hovering_over(void) const;
    int is_dirt(void) const;
    int is_door(void) const;
    int is_droppable(void) const;
    int is_dungeon_wall(void) const;
    int is_ethereal(void) const;
    int is_explosion(void) const;
    int is_extreme_hazard(void) const;
    int is_fearless(void) const;
    int is_fire(void) const;
    int is_flammable(void) const;
    int is_floating(void) const;
    int is_floor(void) const;
    int is_floor_deco(void) const;
    int is_food(void) const;
    int is_food_eater(void) const;
    int is_gfx_water(void) const;
    int is_gold(void) const;
    int is_hazard(void) const;
    int is_hit_by(Thingp hitter);
    int is_hit_by(Thingp hitter, bool crit, bool bite, int damage);
    int is_hit_by(Thingp hitter, int damage);
    int is_humanoid(void) const;
    int is_hunger_insatiable(void) const;
    int is_intelligent(void) const;
    int is_interesting(void) const;
    int is_item(void) const;
    int is_item_collected_as_gold(void) const;
    int is_item_eater(void) const;
    int is_item_effect_max_radius(void) const;
    int is_item_effect_min_radius(void) const;
    int is_item_not_stackable(void) const;
    int is_jelly(void) const;
    int is_jelly_baby(void) const;
    int is_jelly_baby_eater(void) const;
    int is_jelly_eater(void) const;
    int is_jelly_parent(void) const;
    int is_jumper(void) const;
    int is_jumper_chance_d1000(void) const;
    int is_jumper_distance(void) const;
    int is_jumper_on_low_hp_chance_d1000(void) const;
    int is_key(void) const;
    int is_killed_on_hit_or_miss(void) const;
    int is_killed_on_hitting(void) const;
    int is_lava(void) const;
    int is_light_blocker(void) const;
    int is_light_strength(void) const;
    int is_living(void) const;
    int is_loggable_for_important_stuff(void) const;
    int is_loggable_for_unimportant_stuff(void) const;
    int is_meat(void) const;
    int is_meat_eater(void) const;
    int is_minion(void) const;
    int is_minion_generator(void) const;
    int is_monst(void) const;
    int is_moveable(void) const;
    int is_movement_blocking_hard(void) const;
    int is_movement_blocking_soft(void) const;
    int is_msg(void) const;
    int is_no_tile(void) const;
    int is_player(void) const;
    int is_poison(void) const;
    int is_poison_immune(void) const;
    int is_potion(void) const;
    int is_potion_eater(void) const;
    int is_projectile(void) const;
    int is_removeable_if_out_of_slots(void) const;
    int is_resurrectable(void) const;
    int is_ripple(void) const;
    int is_rock(void) const;
    int is_rrr1(void) const;
    int is_rrr10(void) const;
    int is_rrr11(void) const;
    int is_rrr12(void) const;
    int is_rrr13(void) const;
    int is_rrr14(void) const;
    int is_rrr15(void) const;
    int is_rrr16(void) const;
    int is_rrr17(void) const;
    int is_rrr18(void) const;
    int is_rrr19(void) const;
    int is_rrr2(void) const;
    int is_skill(void) const;
    int is_rrr3(void) const;
    int is_rrr4(void) const;
    int is_rrr5(void) const;
    int is_rrr6(void) const;
    int is_rrr7(void) const;
    int is_rrr8(void) const;
    int is_rrr9(void) const;
    int is_secret_door(void) const;
    int is_sewer_wall(void) const;
    int is_shallow_water(void) const;
    int is_shovable(void) const;
    int is_shown_on_leftbar(void) const;
    int is_shown_uniquely_on_leftbar(void) const;
    int is_smoke(void) const;
    int is_stamina_check(void) const;
    int is_steal_item_chance_d1000(void) const;
    int is_temporary_bag(void) const;
    int is_throwable(void) const;
    int is_thrown_automatically_when_selected(void) const;
    int is_torch(void) const;
    int is_treasure(void) const;
    int is_treasure_class_a(void) const;
    int is_treasure_class_b(void) const;
    int is_treasure_class_c(void) const;
    int is_treasure_eater(void) const;
    int is_undead(void) const;
    int is_usable(void) const;
    int is_used_automatically_when_selected(void) const;
    int is_used_when_thrown(void) const;
    int is_wall(void) const;
    int is_water_lover(void) const;
    int is_weapon(void) const;
    int is_weapon_wielder(void) const;
    int minion_limit(void) const;
    int monst_size(void) const;
    int normal_placement_rules(void) const;
    int on_death_drop_all_items(void) const;
    int on_death_is_corpse(void) const;
    int on_death_is_open(void) const;
    int rarity(void) const;
    int set_gold(int);
    int set_health(int);
    int set_health_max(int);
    int set_keys(int);
    int set_lifespan(int);
    int set_minion_count(int);
    int set_modifier_attack(int);
    int set_modifier_constitution(int);
    int set_modifier_defence(int);
    int set_modifier_strength(int);
    int set_owned_count(int);
    int set_poison(int);
    int set_stamina(int);
    int set_stamina_max(int);
    int set_stats01(int);
    int set_stats02(int);
    int set_stats03(int);
    int set_stats04(int);
    int set_stats05(int);
    int set_stats06(int);
    int set_stats07(int);
    int set_stats08(int);
    int set_stats09(int);
    int set_stats10(int);
    int set_stats11(int);
    int set_stats12(int);
    int set_stats17(int);
    int set_stats_stats19(int);
    int set_throw_distance(int);
    int set_tick_rate_tenths(int);
    int tick_catches_up_on_attack(void) const;
    int weapon_damage(void) const;
    int weapon_use_delay_hundredths(void) const;
    int weapon_use_distance(void) const;
    point dir_to_direction() const;
    point get_random_scent_target(void);
    point get_where_i_dropped_an_item_last(void) const;
    point get_where_i_failed_to_collect_last(void) const;
    point set_where_i_dropped_an_item_last(point);
    point set_where_i_failed_to_collect_last(point);
    std::array<std::array<ThingId, MAX_BAG_WIDTH>, MAX_BAG_HEIGHT> * get_bag (void);
    std::list<Thingp> anything_to_carry(void);
    std::size_t get_light_count (void) const;
    std::string get_danger_level(Thingp);
    std::string get_msg(void) const;
    std::string short_text_The(void) const;
    std::string short_text_a_or_an(void) const;
    std::string short_text_the(void) const;
    std::string text_The(void) const;
    std::string text_a_or_an(void) const;
    std::string text_the(void) const;
    std::string to_string(void) const;
    std::vector<Lightp> &get_light(void);
    std::vector<Thingp> get_item_list(void);
    std::vector<Thingp> get_treasure_list(void);
    struct AgeMap_ *get_age_map(void);
    struct Dmap_ *get_dmap_scent(void);
    timestamp_t decr_timestamp_born(timestamp_t);
    timestamp_t decr_timestamp_born(void);
    timestamp_t decr_timestamp_bounce_begin(timestamp_t);
    timestamp_t decr_timestamp_bounce_begin(void);
    timestamp_t decr_timestamp_bounce_end(timestamp_t);
    timestamp_t decr_timestamp_bounce_end(void);
    timestamp_t decr_timestamp_fadeup_begin(timestamp_t);
    timestamp_t decr_timestamp_fadeup_begin(void);
    timestamp_t decr_timestamp_fadeup_end(timestamp_t);
    timestamp_t decr_timestamp_fadeup_end(void);
    timestamp_t decr_timestamp_fall_begin(timestamp_t);
    timestamp_t decr_timestamp_fall_begin(void);
    timestamp_t decr_timestamp_fall_end(timestamp_t);
    timestamp_t decr_timestamp_fall_end(void);
    timestamp_t decr_timestamp_flip_start(timestamp_t);
    timestamp_t decr_timestamp_flip_start(void);
    timestamp_t decr_timestamp_hunger_tick(timestamp_t);
    timestamp_t decr_timestamp_hunger_tick(void);
    timestamp_t decr_timestamp_jump_begin(timestamp_t);
    timestamp_t decr_timestamp_jump_begin(void);
    timestamp_t decr_timestamp_jump_end(timestamp_t);
    timestamp_t decr_timestamp_jump_end(void);
    timestamp_t decr_timestamp_last_tick(timestamp_t);
    timestamp_t decr_timestamp_last_tick(void);
    timestamp_t decr_timestamp_last_ticked(timestamp_t);
    timestamp_t decr_timestamp_last_ticked(void);
    timestamp_t decr_timestamp_last_wander_try(timestamp_t);
    timestamp_t decr_timestamp_last_wander_try(void);
    timestamp_t decr_timestamp_lunge_begin(timestamp_t);
    timestamp_t decr_timestamp_lunge_begin(void);
    timestamp_t decr_timestamp_lunge_end(timestamp_t);
    timestamp_t decr_timestamp_lunge_end(void);
    timestamp_t decr_timestamp_move_begin(timestamp_t);
    timestamp_t decr_timestamp_move_begin(void);
    timestamp_t decr_timestamp_move_end(timestamp_t);
    timestamp_t decr_timestamp_move_end(void);
    timestamp_t decr_timestamp_sleep_end(timestamp_t);
    timestamp_t decr_timestamp_sleep_end(void);
    timestamp_t get_timestamp_born(void) const;
    timestamp_t get_timestamp_bounce_begin(void) const;
    timestamp_t get_timestamp_bounce_end(void) const;
    timestamp_t get_timestamp_fadeup_begin(void) const;
    timestamp_t get_timestamp_fadeup_end(void) const;
    timestamp_t get_timestamp_fall_begin(void) const;
    timestamp_t get_timestamp_fall_end(void) const;
    timestamp_t get_timestamp_flip_start(void) const;
    timestamp_t get_timestamp_hunger_tick(void) const;
    timestamp_t get_timestamp_jump_begin(void) const;
    timestamp_t get_timestamp_jump_end(void) const;
    timestamp_t get_timestamp_last_tick(void) const;
    timestamp_t get_timestamp_last_ticked(void) const;
    timestamp_t get_timestamp_last_wander_try(void) const;
    timestamp_t get_timestamp_lunge_begin(void) const;
    timestamp_t get_timestamp_lunge_end(void) const;
    timestamp_t get_timestamp_move_begin(void) const;
    timestamp_t get_timestamp_move_end(void) const;
    timestamp_t get_timestamp_sleep_end(void) const;
    timestamp_t incr_timestamp_born(timestamp_t);
    timestamp_t incr_timestamp_born(void);
    timestamp_t incr_timestamp_bounce_begin(timestamp_t);
    timestamp_t incr_timestamp_bounce_begin(void);
    timestamp_t incr_timestamp_bounce_end(timestamp_t);
    timestamp_t incr_timestamp_bounce_end(void);
    timestamp_t incr_timestamp_fadeup_begin(timestamp_t);
    timestamp_t incr_timestamp_fadeup_begin(void);
    timestamp_t incr_timestamp_fadeup_end(timestamp_t);
    timestamp_t incr_timestamp_fadeup_end(void);
    timestamp_t incr_timestamp_fall_begin(timestamp_t);
    timestamp_t incr_timestamp_fall_begin(void);
    timestamp_t incr_timestamp_fall_end(timestamp_t);
    timestamp_t incr_timestamp_fall_end(void);
    timestamp_t incr_timestamp_flip_start(timestamp_t);
    timestamp_t incr_timestamp_flip_start(void);
    timestamp_t incr_timestamp_hunger_tick(timestamp_t);
    timestamp_t incr_timestamp_hunger_tick(void);
    timestamp_t incr_timestamp_jump_begin(timestamp_t);
    timestamp_t incr_timestamp_jump_begin(void);
    timestamp_t incr_timestamp_jump_end(timestamp_t);
    timestamp_t incr_timestamp_jump_end(void);
    timestamp_t incr_timestamp_last_tick(timestamp_t);
    timestamp_t incr_timestamp_last_tick(void);
    timestamp_t incr_timestamp_last_ticked(timestamp_t);
    timestamp_t incr_timestamp_last_ticked(void);
    timestamp_t incr_timestamp_last_wander_try(timestamp_t);
    timestamp_t incr_timestamp_last_wander_try(void);
    timestamp_t incr_timestamp_lunge_begin(timestamp_t);
    timestamp_t incr_timestamp_lunge_begin(void);
    timestamp_t incr_timestamp_lunge_end(timestamp_t);
    timestamp_t incr_timestamp_lunge_end(void);
    timestamp_t incr_timestamp_move_begin(timestamp_t);
    timestamp_t incr_timestamp_move_begin(void);
    timestamp_t incr_timestamp_move_end(timestamp_t);
    timestamp_t incr_timestamp_move_end(void);
    timestamp_t incr_timestamp_sleep_end(timestamp_t);
    timestamp_t incr_timestamp_sleep_end(void);
    timestamp_t set_timestamp_born(timestamp_t);
    timestamp_t set_timestamp_bounce_begin(timestamp_t);
    timestamp_t set_timestamp_bounce_end(timestamp_t);
    timestamp_t set_timestamp_fadeup_begin(timestamp_t);
    timestamp_t set_timestamp_fadeup_end(timestamp_t);
    timestamp_t set_timestamp_fall_begin(timestamp_t);
    timestamp_t set_timestamp_fall_end(timestamp_t);
    timestamp_t set_timestamp_flip_start(timestamp_t);
    timestamp_t set_timestamp_hunger_tick(timestamp_t);
    timestamp_t set_timestamp_jump_begin(timestamp_t);
    timestamp_t set_timestamp_jump_end(timestamp_t);
    timestamp_t set_timestamp_last_tick(timestamp_t);
    timestamp_t set_timestamp_last_ticked(timestamp_t);
    timestamp_t set_timestamp_last_wander_try(timestamp_t);
    timestamp_t set_timestamp_lunge_begin(timestamp_t);
    timestamp_t set_timestamp_lunge_end(timestamp_t);
    timestamp_t set_timestamp_move_begin(timestamp_t);
    timestamp_t set_timestamp_move_end(timestamp_t);
    timestamp_t set_timestamp_sleep_end(timestamp_t);
    uint32_t decr_tick(uint32_t);
    uint32_t decr_tick(void);
    uint32_t decr_tick_last_did_something(uint32_t);
    uint32_t decr_tick_last_did_something(void);
    uint32_t decr_tick_last_escape(uint32_t);
    uint32_t decr_tick_last_escape(void);
    uint32_t decr_tick_last_level_change(uint32_t);
    uint32_t decr_tick_last_level_change(void);
    uint32_t decr_tick_resurrect_when(int);
    uint32_t decr_tick_resurrect_when(void);
    uint32_t get_tick(void);
    uint32_t get_tick_const(void) const;
    uint32_t get_tick_last_did_something(void) const;
    uint32_t get_tick_last_escape(void) const;
    uint32_t get_tick_last_level_change(void) const;
    uint32_t get_tick_resurrect_when(void) const;
    uint32_t incr_tick(uint32_t);
    uint32_t incr_tick(void);
    uint32_t incr_tick_last_did_something(uint32_t);
    uint32_t incr_tick_last_did_something(void);
    uint32_t incr_tick_last_escape(uint32_t);
    uint32_t incr_tick_last_escape(void);
    uint32_t incr_tick_last_level_change(uint32_t);
    uint32_t incr_tick_last_level_change(void);
    uint32_t incr_tick_resurrect_when(int);
    uint32_t incr_tick_resurrect_when(void);
    uint32_t set_max_tick_difference();
    uint32_t set_tick(uint32_t);
    uint32_t set_tick_last_did_something(uint32_t);
    uint32_t set_tick_last_escape(uint32_t);
    uint32_t set_tick_last_level_change(uint32_t);
    uint32_t set_tick_resurrect_when(int);
    uint8_t blit_begin_reflection_submerged(void) const;
    uint8_t blit_begin_submerged(void) const;
    uint8_t is_dir_bl(void) const;
    uint8_t is_dir_br(void) const;
    uint8_t is_dir_down(void) const;
    uint8_t is_dir_left(void) const;
    uint8_t is_dir_none(void) const;
    uint8_t is_dir_right(void) const;
    uint8_t is_dir_tl(void) const;
    uint8_t is_dir_tr(void) const;
    uint8_t is_dir_up(void) const;
    uint8_t is_less_preferred_terrain(point p);
    uint8_t is_visible() const;
    uint8_t z_prio (void) const;
    void acid_tick();
    void add_enemy(Thingp attacker);
    void ai_get_next_hop(void);
    void animate();
    void blit(int fbo);
    void blit_end_reflection_submerged(uint8_t submerged) const;
    void blit_end_submerged(uint8_t submerged) const;
    void blit_floor_chasm(point &tl, point &br, const ThingTiles *tiles);
    void blit_internal(int fbo, point &blit_tl, point &blit_br, const Tilep tile, color c, const bool reflection);
    void blit_non_player_owned_shadow(const Tpp &tp, const Tilep &tile, const point &tl, const point &br);
    void blit_player_owned_shadow(const Tpp &tp, const Tilep &tile, const point &tl, const point &br);
    void blit_shadow(const Tpp &tp, const Tilep &tile, const point &tl, const point &br);
    void blit_text(std::string const&, color c, point tl, point br);
    void blit_upside_down(int fbo);
    void blit_wall_cladding(point &tl, point &br, const ThingTiles *tiles);
    void blit_wall_shadow(point &tl, point &br, const ThingTiles *tiles);
    void botcon(const char *fmt, ...) const __attribute__ ((format (printf, 2, 3)));
    void botcon_(const char *fmt, va_list args) const; // compile error without
    void bounce(float bounce_height, float bounce_fade, timestamp_t ms, int bounce_count);
    void clear_age_map(void);
    void clear_dmap_scent(void);
    void collision_check_do();
    void con(const char *fmt, ...) const __attribute__ ((format (printf, 2, 3)));
    void con_(const char *fmt, va_list args) const; // compile error without
    void cursor_hover_over_check(void);
    void cursor_path_stop(void);
    void dbg(const char *fmt, ...) const __attribute__ ((format (printf, 2, 3)));
    void dead(Thingp killer, const char *fmt, ...) __attribute__ ((format (printf, 3, 4)));
    void dead(Thingp killer, std::string &);
    void dead(const char *fmt, ...) __attribute__ ((format (printf, 2, 3)));
    void dead(std::string &);
    void dead_(Thingp killer, const char *fmt, va_list args); // compile error without
    void dead_(const char *fmt, va_list args); // compile error without
    void delete_age_map(void);
    void delete_dmap_scent(void);
    void delete_lights(void);
    void delete_particle();
    void destroy();
    void destroyed(void);
    void die(const char *fmt, ...) __attribute__ ((format (printf, 2, 3)));
    void die_(const char *fmt, va_list args); // compile error without
    void dir_set_bl(void);
    void dir_set_br(void);
    void dir_set_down(void);
    void dir_set_left(void);
    void dir_set_none(void);
    void dir_set_right(void);
    void dir_set_tl(void);
    void dir_set_tr(void);
    void dir_set_up(void);
    void drop_all(void);
    void dump(std::string prefix, std::ostream &out);
    void err(const char *fmt, ...) const __attribute__ ((format (printf, 2, 3)));
    void err_(const char *fmt, va_list args) const; // compile error without
    void fadeup(float fadeup_height, float fadeup_fade, timestamp_t ms);
    void fall(float fall_height, timestamp_t ms);
    void fire_tick();
    void gc(void);
    void get_tiles(void);
    void health_boost(int v);
    void hide();
    void hooks_remove();
    void hunger_clock();
    void inherit_from(Thingp it);
    void init(Levelp, const std::string& name, fpoint at, fpoint jitter);
    void init_lights(void);
    void inventory_particle(Thingp what, uint32_t slot);
    void inventory_particle(Thingp what, uint32_t slot, Thingp target);
    void jump_end(void);
    void kill(Thingp killer, const char *reason);
    void kill(Thingp killer, std::string &reason);
    void kill_minions(Thingp killer);
    void lava_tick();
    void level_change(Levelp);
    void level_enter(void);
    void level_leave(void);
    void level_pop(void);
    void level_push(void);
    void lifespan_tick();
    void log(const char *fmt, ...) const __attribute__ ((format (printf, 2, 3)));
    void log_(const char *fmt, va_list args) const; // compile error without
    void lunge(fpoint tt);
    void topcon(const char *fmt, ...) const __attribute__ ((format (printf, 2, 3)));
    void topcon_(const char *fmt, va_list args) const; // compile error without
    void move_carried_items(void);
    void move_carried_items_immediately(void);
    void move_completed(void);
    void move_delta(fpoint);
    void move_finish(void);
    void move_set_dir_from_delta(fpoint);
    void move_to(fpoint to);
    void move_to(fpoint to, uint32_t speed);
    void move_to_immediately(fpoint to);
    void move_to_immediately_delta(fpoint delta);
    void msg(const std::string&);
    void new_age_map(void);
    void new_dmap_scent(void);
    void new_light(point offset, int strength, color col, int fbo);
    void new_monst(void);
    void poison_boost(int v);
    void reinit(void);
    void remove_all_references();
    void remove_minion_owner(void);
    void remove_owner(void);
    void rest();
    void resurrect_tick();
    void set_bounce_count(int);
    void set_bounce_fade(float);
    void set_bounce_height(float);
    void set_fadeup_fade(float);
    void set_fadeup_height(float);
    void set_fall_height(float);
    void set_lunge_to(fpoint);
    void set_minion_owner(Thingp minion_owner);
    void set_msg(const std::string&);
    void set_owner(Thingp owner);
    void set_submerged_offset(int);
    void set_wobble(float);
    void sheath(void);
    void stamina_boost(int v);
    void throw_at(Thingp w, Thingp target);
    void tick();
    void torch_tick();
    void try_to_carry(const std::list<Thingp> &items);
    void unleash_minions(void);
    void unset_on_fire(void);
    void unwield(const char *why);
    void update_all(void);
    void update_interpolated_position(void);
    void update_light(void);
    void update_pos(fpoint, bool immediately, uint32_t speed = 0);
    void update_tick(void);
    void use_weapon(void);
    void used(Thingp w, Thingp target);
    void visible();
    void water_tick();
    void weapon_get_use_offset(float *dx, float *dy) const;
    void weapon_set_carry_anim(Thingp weapon_carry_anim);
    void weapon_set_carry_anim_id(ThingId weapon_carry_anim_id);
    void weapon_set_placement(void);
    void weapon_set_use_anim(Thingp gfx_anim_attack);
    void weapon_set_use_anim_id(ThingId gfx_anim_attack_id);
    void weapon_sheath(void);
    void wield(Thingp w);
    void wobble(float wobble);
} Thing;

std::ostream& operator<<(std::ostream &out, Bits<const Thingp & > const my);
std::istream& operator>>(std::istream &in, Bits<Thingp &> my);

bool things_overlap(Thingp t, Thingp o);
bool things_overlap(Thingp t, fpoint t_at, Thingp o);
bool things_overlap_attack(Thingp t, fpoint t_at, Thingp o);
int bag_estimate_volume(const std::list<Thingp> &items);

#endif // _MY_THING_H_
