
NAME=zorbash-game
OBJDIR=.build

GAME_SOURCE := $(wildcard *.cpp) $(wildcard *.S)
GAME_OBJECTS :=\
	$(addprefix $(OBJDIR)/,$(addsuffix .o,$(basename $(GAME_SOURCE))))

DEP_FILES := $(patsubst %.o,%.d,$(GAME_OBJECTS))
DEP_FLAGS = -MMD -MP

$(OBJDIR): ; mkdir -p $(OBJDIR)
$(GAME_OBJECTS): | $(OBJDIR)

$(OBJDIR)/%.o: %.cpp
	@echo $(CC) $(EXTRA_CFLAGS) $(CFLAGS) $(DEP_FLAGS) -c -o $@ $<
	@$(CC) $(EXTRA_CFLAGS) $(CFLAGS) $(DEP_FLAGS) -c -o $@ $<

$(OBJDIR)/%.o: %.S
	@echo $(CC) -c -o $@ $<
	@$(CC) -c -o $@ $<

#
# link
#
TARGET_GAME=$(NAME)$(EXE)
$(TARGET_GAME): $(GAME_OBJECTS)
	/bin/rm -f ../$(TARGET_GAME)
	$(CC) $(LDFLAGS) $(GAME_OBJECTS) $(LDLIBS) -o $(TARGET_GAME)
	cp $(TARGET_GAME) ..

#
# To force clean and avoid "up to date" warning.
#
# clean/clobber
.PHONY: all clean clobber

clean:
	rm -f ../$(TARGET_GAME) ../stdout.txt ../stderr.txt
	rm -f $(TARGET_GAME) stdout.txt stderr.txt
	rm -rf $(OBJDIR)
	mkdir -p $(OBJDIR)

clobber: clean
	rm -rf $(OBJDIR)
	mkdir -p $(OBJDIR)

all: $(TARGET_GAME)

# delete corresponding object file if dependency file needs regeneration
$(OBJDIR)/%.d: ; @rm -f "$(@:.d=.o)"

# include all dependency files
-include $(DEP_FILES)
